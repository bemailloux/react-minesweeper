{"version":3,"sources":["logic.js","index.js"],"names":["SquareValueEnum","unknown","mine","0","1","2","3","4","5","6","7","8","9","flag","calculateAdjacentMines","board","x","y","count","length","initializeViewableBoard","numRows","numCols","viewableBoard","Array","parseInt","i","fill","initializeHiddenBoard","numMines","mineIdx","mineRow","mineCol","Math","floor","random","j","Square","props","react_default","a","createElement","className","value","onClick","onContextMenu","e","preventDefault","onRightClick","Board","_this","this","rows","_loop","cols","_loop2","push","key","btnClick","btnRightClick","React","Component","NewGameButton","DifficultyPicker","defaultValue","onChange","target","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","timer","state","mines","logic","hiddenBoard","showHidden","gameWon","time","isNewGame","difficulty","flagsLeft","setState","clearInterval","showClickedSquares","map","row","item","every","val","_this3","gameParams","setInterval","_this4","src_Board","handleButtonClick","handleButtonRightClick","startNewGame","_this5","winOrLoseText","renderBoard","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.35a4324e.chunk.js","sourcesContent":["export const SquareValueEnum = {\r\n  'unknown': '-',\r\n  'mine': 'x',\r\n  '0': 0,\r\n  '1': 1,\r\n  '2': 2,\r\n  '3': 3,\r\n  '4': 4,\r\n  '5': 5,\r\n  '6': 6,\r\n  '7': 7,\r\n  '8': 8,\r\n  '9': 9,\r\n  'flag': 'F',\r\n}\r\n\r\n// game logic functions\r\nexport function calculateAdjacentMines(board, x, y) {\r\n  if (board[x][y] === SquareValueEnum['mine']) return SquareValueEnum['mine'];\r\n  let count = 0;\r\n\r\n  // check the row above this row\r\n  if (x > 0) {\r\n    if (y > 0) {\r\n      if (board[x-1][y-1] === SquareValueEnum['mine']) count++;\r\n    }\r\n    if (board[x-1][y] === SquareValueEnum['mine']) count++;\r\n    if (y < board[x].length - 1) {\r\n      if (board[x-1][y+1] === SquareValueEnum['mine']) count++;\r\n    }\r\n  }\r\n\r\n  // check this row\r\n  if (y > 0) {\r\n    if (board[x][y-1] === SquareValueEnum['mine']) count++;\r\n  }\r\n  if (board[x][y] === SquareValueEnum['mine']) count++;\r\n  if (y < board[x].length - 1) {\r\n    if (board[x][y+1] === SquareValueEnum['mine']) count++;\r\n  }\r\n\r\n  // check the row below this row\r\n  if (x < board.length - 1) {\r\n    if (y > 0) {\r\n      if (board[x+1][y-1] === SquareValueEnum['mine']) count++;\r\n    }\r\n    if (board[x+1][y] === SquareValueEnum['mine']) count++;\r\n    if (y < board[x].length - 1) {\r\n      if (board[x+1][y+1] === SquareValueEnum['mine']) count++;\r\n    }\r\n  }\r\n\r\n  return count;\r\n}\r\n\r\nexport function initializeViewableBoard(numRows, numCols) {\r\n  let viewableBoard = new Array(parseInt(numRows));\r\n  for (let i = 0; i < numRows; i++) {\r\n    viewableBoard[i] = (new Array(parseInt(numCols))).fill(SquareValueEnum['unknown']);\r\n  }\r\n\r\n  return viewableBoard;\r\n}\r\n\r\nexport function initializeHiddenBoard(numRows, numCols, numMines) {\r\n  if (numMines > numRows * numCols) {\r\n    // too many mines\r\n    return;\r\n  }\r\n\r\n  // create the board\r\n  let board = new Array(parseInt(numRows));\r\n  for (let i = 0; i < numRows; i++) {\r\n    board[i] = new Array(parseInt(numCols));\r\n  }\r\n\r\n  // put mines randomly in the board\r\n  for (let mineIdx = 0; mineIdx < numMines; mineIdx++) {\r\n    let mineRow, mineCol;\r\n    do {\r\n      mineRow = Math.floor(Math.random() * numRows);\r\n      mineCol = Math.floor(Math.random() * numCols);\r\n    } while(board[mineRow][mineCol] === SquareValueEnum['mine']);\r\n\r\n    board[mineRow][mineCol] = SquareValueEnum['mine'];\r\n  }\r\n\r\n  // calculate number of adjacent mines to each square\r\n  for (let i = 0; i < numRows; i++) {\r\n    for (let j = 0; j < numCols; j++) {\r\n      board[i][j] = calculateAdjacentMines(board, i, j);\r\n    }\r\n  }\r\n\r\n  return board;\r\n}\r\n\r\nexport function showClickedSquares(viewableBoard, hiddenBoard, x, y) {\r\n  // if we already checked this square, don't bother checking it again\r\n  if (viewableBoard[x][y] !== SquareValueEnum['unknown']) return viewableBoard;\r\n  viewableBoard[x][y] = hiddenBoard[x][y];\r\n\r\n  // do recursive \"zero expansion\"\r\n  if (hiddenBoard[x][y] === SquareValueEnum['0']) {\r\n    if (x > 0) {\r\n      if (y > 0) viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x-1, y-1);\r\n      viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x-1, y);\r\n      if (y < viewableBoard[0].length-1) viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x-1, y+1);\r\n    }\r\n\r\n    if (y > 0) viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x, y-1);\r\n    if (y < viewableBoard[0].length-1) viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x, y+1);\r\n\r\n    if (x < viewableBoard.length-1) {\r\n      if (y > 0) viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x+1, y-1);\r\n      viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x+1, y);\r\n      if (y < viewableBoard[0].length-1) viewableBoard = showClickedSquares(viewableBoard, hiddenBoard, x+1, y+1);\r\n    }\r\n  }\r\n\r\n  return viewableBoard;\r\n}\r\n\r\nexport function checkVictoryCondition(viewableBoard, hiddenBoard) {\r\n  let verifyBoard = viewableBoard.map((row) => {\r\n    return row.map((item) => {\r\n      return (item === SquareValueEnum['unknown'] || item === SquareValueEnum['flag']) ? SquareValueEnum['mine'] : item;\r\n    });\r\n  });\r\n\r\n  return verifyBoard.every((row, i) => {\r\n    return row.every((val, j) => {\r\n      return val === hiddenBoard[i][j];\r\n    });\r\n  });\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as logic from './logic.js';\n\n// Components\nfunction Square(props) {\n  return (\n    <button\n      className={'square bg-color' + props.value}\n      onClick={props.onClick}\n      onContextMenu={(e) => {e.preventDefault(); props.onRightClick();}}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  render() {\n    let rows = [];\n    for (let i = 0; i < this.props.rows; i++) {\n      let cols = [];\n      for (let j = 0; j < this.props.cols; j++) {\n        cols.push(\n          <Square\n            key={i + ' ' + j}\n            value={this.props.board[i][j]}\n            onClick={() => this.props.btnClick(i,j)}\n            onRightClick={() => this.props.btnRightClick(i,j)}\n          />\n        );\n      }\n\n      rows.push(\n        <div className='board-row' key={i}>\n          {cols}\n        </div>\n      );\n    }\n\n    return (\n      <div className='board'>\n        {rows}\n      </div>\n    );\n  }\n}\n\nfunction ShowAnswerButton(props) {\n  return (\n    <button className='show-answer-button' onClick={props.onClick}>\n      Show Answer [Debug]\n    </button>\n  );\n}\n\nfunction NewGameButton(props) {\n  return (\n    <button className='new-game-button' onClick={props.onClick}>\n      New Game\n    </button>\n  );\n}\n\nfunction DifficultyPicker(props) {\n  return (\n    <select\n      className=\"difficulty-picker\"\n      defaultValue=\"beginner\"\n      onChange={(e) => { props.onChange(e.target.value); }}\n    >\n      <option value=\"beginner\">Beginner</option>\n      <option value=\"intermediate\">Intermediate</option>\n      <option value=\"expert\">Expert</option>\n    </select>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let rows = 10, cols = 10, mines = 10;\n    this.timer = null;\n\n    this.state = {\n      rows: rows,\n      cols: cols,\n      mines: mines,\n      viewableBoard: logic.initializeViewableBoard(rows, cols),\n      hiddenBoard: null,\n      showHidden: false,\n      gameWon: null,\n      time: 0,\n      isNewGame: true,\n      difficulty: 'beginner',\n      flagsLeft: mines,\n    }\n  }\n\n  handleButtonClick(x, y) {\n    let hiddenBoard = this.state.hiddenBoard;\n    if (this.state.isNewGame) {\n      // every beginning of the game has to start with the user clicking on a \"zero\" square\n      // so initialize a new board until the square that the user clicked on is a \"zero\" square\n      do {\n        hiddenBoard = logic.initializeHiddenBoard(\n          this.state.rows,\n          this.state.cols,\n          this.state.mines\n        );\n      } while (hiddenBoard[x][y] !== logic.SquareValueEnum['0']);\n      this.setState({ hiddenBoard: hiddenBoard, isNewGame: false });\n    }\n\n    // if we click on a square with a flag on it, do nothing\n    if (this.state.viewableBoard[x][y] === logic.SquareValueEnum['flag']) {\n      return;\n    }\n\n    // if we clicked on a mine, then game over and show the entire board\n    if (hiddenBoard[x][y] === logic.SquareValueEnum['mine']) {\n      this.setState({showHidden: true, gameWon: false});\n      clearInterval(this.timer);\n      return;\n    }\n\n    // otherwise show the number we clicked on\n    let viewableBoard = logic.showClickedSquares(this.state.viewableBoard, hiddenBoard, x, y);\n\n    // check if we won the game\n    if (logic.checkVictoryCondition(viewableBoard, hiddenBoard)) {\n      this.setState({gameWon: true});\n      clearInterval(this.timer);\n    }\n\n    this.setState({viewableBoard: viewableBoard});\n  }\n\n  handleButtonRightClick(x, y) {\n    // add flag when user right clicks\n    let viewableBoard = this.state.viewableBoard;\n    let flagsLeft = this.state.flagsLeft;\n\n    // only allow right clicks on empty squares and flag squares\n    // don't let the user place a flag if they have none left\n    if (viewableBoard[x][y] === logic.SquareValueEnum['unknown'] && flagsLeft > 0) {\n      viewableBoard[x][y] = logic.SquareValueEnum['flag'];\n      flagsLeft--;\n    } else if (viewableBoard[x][y] === logic.SquareValueEnum['flag']) {\n      viewableBoard[x][y] = logic.SquareValueEnum['unknown'];\n      flagsLeft++;\n    }\n\n    this.setState({viewableBoard: viewableBoard, flagsLeft: flagsLeft});\n  }\n\n  showAnswer() {\n    this.setState({showHidden: true, gameWon: false});\n    clearInterval(this.timer);\n  }\n\n  startNewGame(difficulty) {\n    let gameParams = null;\n    difficulty = difficulty || this.state.difficulty;\n    if (difficulty === 'beginner') {\n      gameParams = { rows: 10, cols: 10, mines: 10 };\n    } else if (difficulty === 'intermediate') {\n      gameParams = { rows: 16, cols: 16, mines: 40 };\n    } else if (difficulty === 'expert') {\n      gameParams = { rows: 16, cols: 30, mines: 99 };\n    }\n\n    this.setState({\n      rows: gameParams.rows,\n      cols: gameParams.cols,\n      mines: gameParams.mines,\n      viewableBoard: logic.initializeViewableBoard(gameParams.rows, gameParams.cols),\n      hiddenBoard: null,\n      gameWon: null,\n      showHidden: false,\n      time: 0,\n      isNewGame: true,\n      difficulty: difficulty,\n      flagsLeft: gameParams.mines,\n    });\n    clearInterval(this.timer);\n\n    this.timer = setInterval(() => {this.setState({time: this.state.time + 1})}, 1000);\n  }\n\n  renderBoard() {\n    return (\n      <Board\n        rows={this.state.rows}\n        cols={this.state.cols}\n        mines={this.state.mines}\n        board={this.state.showHidden ? this.state.hiddenBoard : this.state.viewableBoard}\n        btnClick={(x, y) => this.handleButtonClick(x, y)}\n        btnRightClick={(x, y) => this.handleButtonRightClick(x, y)}\n      />\n    );\n  }\n\n  componentDidMount() {\n    this.startNewGame();\n  }\n\n  render() {\n    let winOrLoseText = '';\n    if (this.state.gameWon === true) {\n      winOrLoseText = 'You won! :)';\n    } else if (this.state.gameWon === false) {\n      winOrLoseText = 'Game over! :(';\n    }\n    winOrLoseText += ' Time: ' + this.state.time + ' seconds';\n\n    return (\n      <div>\n        <h1>Minesweeper</h1>\n        {this.renderBoard()}\n        <div className=\"win-or-lose\">{winOrLoseText}</div>\n        <div className='flag-counter'>{'Mines remaining: ' + this.state.flagsLeft}</div>\n        <NewGameButton onClick={() => this.startNewGame()} />\n        <DifficultyPicker onChange={(difficulty) => this.startNewGame(difficulty) } />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game/>, document.getElementById('root'));\n"],"sourceRoot":""}